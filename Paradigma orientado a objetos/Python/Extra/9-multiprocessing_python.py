"""
üìå Este archivo explica a detalle el m√≥dulo multiprocessing en Python.
Se detallan las funciones m√°s importantes con ejemplos explicativos.

üîπ Contenido:
1. start() ‚Üí Inicia un proceso
2. end() ‚Üí Marca el final de una operaci√≥n (medici√≥n de tiempo)
3. cpu_count() ‚Üí Devuelve el n√∫mero de n√∫cleos del procesador
4. Pool() ‚Üí Crea un grupo de procesos para ejecutar tareas en paralelo
5. chunks ‚Üí Fragmentaci√≥n de datos para procesamiento paralelo
6. results ‚Üí Resultados devueltos por los procesos paralelos
7. end time ‚Üí Mide el tiempo de ejecuci√≥n de un proceso
8. Diferencia entre Process y Pool
"""

import multiprocessing as mp
import time
import random

# --------------------------------------
# üîπ 1. start() y end() (Medici√≥n de tiempo)
# --------------------------------------
"""
En programaci√≥n paralela, queremos medir el tiempo de ejecuci√≥n de nuestros procesos.
Usamos `time.time()` para capturar el tiempo antes (`start`) y despu√©s (`end`) de ejecutar una tarea.
"""

# Ejemplo:
start = time.time()  # Captura el tiempo inicial
time.sleep(2)        # Simula una tarea de 2 segundos
end = time.time()    # Captura el tiempo final
print("Tiempo total de ejecuci√≥n:", end - start, "segundos")

# --------------------------------------
# üîπ 2. cpu_count() (N√∫mero de n√∫cleos del procesador)
# --------------------------------------
"""
La funci√≥n `mp.cpu_count()` nos dice cu√°ntos n√∫cleos tiene la CPU.
Esto es √∫til porque en `multiprocessing`, dividir el trabajo entre m√∫ltiples n√∫cleos mejora el rendimiento.
"""

num_cores = mp.cpu_count()
print(f"N√∫mero de n√∫cleos del CPU disponibles: {num_cores}")

# --------------------------------------
# üîπ 3. Pool() (Grupo de procesos)
# --------------------------------------
"""
El objeto `mp.Pool()` nos permite dividir una tarea en partes y ejecutarlas en paralelo en m√∫ltiples procesos.
Esto es √∫til cuando queremos aplicar una misma funci√≥n a diferentes datos.
"""

def calcular_cuadrado(n):
    """Funci√≥n que calcula el cuadrado de un n√∫mero."""
    return n * n

if __name__ == "__main__":
    pool = mp.Pool(processes=4)  # Crea un pool con 4 procesos

    numeros = [1, 2, 3, 4, 5, 6, 7, 8]
    resultados = pool.map(calcular_cuadrado, numeros)  # Ejecuta la funci√≥n en paralelo
    pool.close()  # Cierra el pool de procesos
    pool.join()   # Espera a que terminen todos los procesos

    print("Resultados del c√°lculo en paralelo:", resultados)  # [1, 4, 9, 16, 25, 36, 49, 64]

# --------------------------------------
# üîπ 4. chunks (Fragmentaci√≥n de datos)
# --------------------------------------
"""
Cuando trabajamos con grandes vol√∫menes de datos, no podemos procesarlos de una sola vez.
Para mejorar el rendimiento, dividimos los datos en fragmentos (`chunks`) y procesamos cada fragmento en paralelo.
"""

def suma_lista(lista):
    """Funci√≥n que suma los elementos de una lista."""
    return sum(lista)

if __name__ == "__main__":
    vector = [random.randint(1, 100) for _ in range(1000000)]  # Lista de 1 mill√≥n de elementos

    num_procesos = mp.cpu_count()
    tama√±o_chunk = len(vector) // num_procesos  # Tama√±o de cada fragmento

    chunks = [vector[i:i + tama√±o_chunk] for i in range(0, len(vector), tama√±o_chunk)]

    pool = mp.Pool(num_procesos)
    start = time.time()
    results = pool.map(suma_lista, chunks)  # Ejecuta en paralelo la suma de cada fragmento
    suma_total = sum(results)
    end = time.time()

    print("Tiempo total de procesamiento paralelo:", end - start, "segundos")
    print("Suma total:", suma_total)

    pool.close()
    pool.join()

# --------------------------------------
# üîπ 5. results (Recibir datos de procesos en paralelo)
# --------------------------------------
"""
Cuando usamos `Pool.map()`, obtenemos una lista de resultados con los valores calculados por cada proceso.
Podemos sumar, filtrar o combinar estos resultados seg√∫n sea necesario.
"""

# En el ejemplo anterior, `results` contiene la suma parcial de cada fragmento de la lista.

# --------------------------------------
# üîπ 6. Diferencias entre `Process` y `Pool`
# --------------------------------------
"""
üîπ `mp.Process()` ‚Üí Se usa para ejecutar un solo proceso manualmente.
üîπ `mp.Pool()` ‚Üí Se usa para distribuir autom√°ticamente una tarea entre m√∫ltiples procesos.

üìå ¬øCu√°ndo usar cada uno?
‚úÖ Usa `Process` si necesitas m√°s control sobre cada proceso.
‚úÖ Usa `Pool` si tienes muchas tareas similares y quieres repartir el trabajo autom√°ticamente.
"""

def imprimir_proceso(nombre):
    """Funci√≥n que ejecutar√° cada proceso."""
    print(f"Ejecutando proceso {nombre}")

if __name__ == "__main__":
    # Creaci√≥n manual de procesos individuales
    p1 = mp.Process(target=imprimir_proceso, args=("Uno",))
    p2 = mp.Process(target=imprimir_proceso, args=("Dos",))

    p1.start()
    p2.start()

    p1.join()
    p2.join()

    print("Procesos finalizados.")

# --------------------------------------
# üîπ 7. `apply()`, `map()` y `starmap()`
# --------------------------------------
"""
üìå M√©todos de `Pool` para ejecutar funciones en paralelo:

1Ô∏è‚É£ `apply(func, args=())` ‚Üí Ejecuta una funci√≥n en un solo proceso y devuelve el resultado.
2Ô∏è‚É£ `map(func, iterable)` ‚Üí Aplica la funci√≥n a cada elemento del iterable en paralelo.
3Ô∏è‚É£ `starmap(func, iterable_de_tuplas)` ‚Üí Como `map()`, pero pasa m√∫ltiples argumentos en cada llamada.
"""

def sumar(a, b):
    return a + b

if __name__ == "__main__":
    pool = mp.Pool(4)

    # `apply()` ‚Üí Ejecuta la funci√≥n una vez
    resultado_apply = pool.apply(sumar, args=(5, 10))
    print("Resultado de apply:", resultado_apply)  # 15

    # `map()` ‚Üí Ejecuta la funci√≥n en paralelo para cada elemento
    lista_numeros = [(1, 2), (3, 4), (5, 6)]
    resultado_map = pool.starmap(sumar, lista_numeros)
    print("Resultado de starmap:", resultado_map)  # [3, 7, 11]

    pool.close()
    pool.join()

# --------------------------------------
# üîπ 8. Uso de `if __name__ == "__main__"`
# --------------------------------------
"""
‚ö†Ô∏è IMPORTANTE: En Windows, `multiprocessing` requiere que el c√≥digo est√© dentro de `if __name__ == "__main__"`.
Si no lo haces, obtendr√°s un error debido a la forma en que Windows maneja la creaci√≥n de procesos.
"""

# --------------------------------------
# üîπ 9. Resumen General
# --------------------------------------
"""
‚úÖ Usa `mp.cpu_count()` para saber cu√°ntos n√∫cleos tiene tu CPU.
‚úÖ Usa `mp.Pool()` para distribuir autom√°ticamente el trabajo en m√∫ltiples procesos.
‚úÖ Usa `Pool.map()` para aplicar una funci√≥n en paralelo a una lista de datos.
‚úÖ Usa `if __name__ == "__main__"` para evitar errores en Windows.
‚úÖ Usa `Process` si necesitas controlar cada proceso manualmente.
‚úÖ Usa `Pool` si quieres dividir el trabajo sin preocuparte por manejar procesos manualmente.
"""

# --------------------------------------
# üîπ 10. Conclusi√≥n
# --------------------------------------
"""
El paralelismo en Python con `multiprocessing` es una forma eficiente de acelerar tareas computacionales.
Usar m√∫ltiples procesos mejora el rendimiento cuando trabajamos con c√°lculos intensivos en CPU.
"""

# üöÄ Ahora tienes toda la informaci√≥n necesaria para trabajar con multiprocessing en Python.
