"""
17. Implementar el algoritmo de map reduce para conteo de palabras en un
texto, mida su tiempo de la parte del reduce de forma secuencial y luego en
forma paralela.
"""

import multiprocessing as mp
import time


def contarPalabras(texto):
    palabras = texto.split()
    return len(palabras)

# Funci√≥n de mapeo: Tokeniza el texto y cuenta palabras en cada fragmento
def map_function(text_fragment):
    word_count = {}
    for word in text_fragment.split():
        word = word.lower()
        word_count[word] = word_count.get(word, 0) + 1
    return word_count

# Funci√≥n de reducci√≥n secuencial
def reduce_sequential(word_counts):
    final_count = {}
    for wc in word_counts:
        for word, count in wc.items():
            final_count[word] = final_count.get(word, 0) + count
    return final_count

# Funci√≥n de reducci√≥n en paralelo
def reduce_parallel(word_counts):
    with mp.Pool(processes=mp.cpu_count()) as pool:
        while len(word_counts) > 1:
            word_counts = pool.map(merge_dicts, [(word_counts[i], word_counts[i + 1]) 
                                                 for i in range(0, len(word_counts) - 1, 2)])
    return word_counts[0] if word_counts else {}

# Funci√≥n auxiliar para fusionar dos diccionarios de conteo de palabras
def merge_dicts(dict_pair):
    dict1, dict2 = dict_pair
    merged = dict1.copy()
    for word, count in dict2.items():
        merged[word] = merged.get(word, 0) + count
    return merged

# Funci√≥n para sumar palabras en paralelo
def suma(text):
    return contarPalabras(text)


def main():

    texto = """1
Ejercicios OOP
Paradigma Orientado a Objetos
1. Desarrollar un programa que permita inicializar dos puntos en un plano con
coordenadas (x,y) y que calcule la distancia entre dichos puntos. Desarrollar su
soluci√≥n en Python.
2. Modifique su programa anterior de tal forma que las atributos de la clase se
encuentren de forma privada. Desarrolle su soluci√≥n en Python, C++, Ruby y
Smalltalk. Compare sus soluciones.
Nota: Recuerde que no es un curso de Python, C++ o Ruby, la sintaxis la
puede conseguir de cualquier libro. Se podr√° cambiar de lenguaje en cualquier
momento del curso.
En el caso de Ruby y Python puede usar el siguiente compilador en l√≠nea:
https://www.onlinegdb.com/online_ruby_compiler
Para el caso de C++ puede ser CodeBlocks o alg√∫n compilador en l√≠nea.
En el caso de SmallTalk el siguiente compilador puede servir:
https://www.tutorialspoint.com/execute_smalltalk_online.php
3. Un monomio es una expresi√≥n algebraica que tiene la siguiente forma:
ùëêùë•
ùëõ
Defina una clase polinomio la cual contenga un m√©todo que permita agregar los
monomios a una lista y que luego imprima el polinomio respectivo. Su
programa deber√° ser llamado, desde un programa principal, de la siguiente
forma:
obj1=Monomio(3,"x",4)
obj2=Monomio(-2,"x",5)
obj3=Monomio(5,"x",-4)
p=Polinomio()
p.agregar(obj1)
p.agregar(obj2)
p.agregar(obj3)
p.imprimirP()
2
El polinomio podr√° ser impreso de la siguiente forma: 3x**4+ -2x**5+ 5x**-4+
Puede usar al final de un print la instrucci√≥n end=‚Äù ‚Äú a fin de que no imprima
cada dato en una l√≠nea distinta.
4. Escriba un programa que pida al usuario el ingreso de un n√∫mero entero
positivo de tal manera que imprima todos los n√∫meros primos hasta ese
n√∫mero. Cree una clase denominada Pila (stack) la cual almacene estos
n√∫meros primos y que luego imprima estos elementos en orden inverso.
Para este programa puede utilizar la estructura de datos list de Python as√≠
como la instrucci√≥n pop(pos), esta instrucci√≥n devuelve el dato que almacena
una lista dada una posici√≥n determinada. Desarrollar su soluci√≥n en Python.
Hacer su implementaci√≥n en Python, C++ y Ruby.
5. Crear una clase llamada Empleado que incluya la siguiente informaci√≥n como
variables de instancia:
- C√≥digo
- Nombre
- Salario
Cree objetos del tipo empleado con variables de instancia de tipo p√∫blicas o
privadas, esta clase deber√° contener un m√©todo que genere el c√≥digo, la letra
del nombre del empleado y su sueldo al azar; puede usar la instrucci√≥n
siguiente:
from random import random
random()
Programe otra clase que permita agregar a una lista un conjunto de empleados.
Del mismo modo, codifique un programa principal que mediante un bucle
genere 10 empleados y los agregue a la lista de la clase anteriormente definida.
Su esquema de clases deber√° ser el siguiente:
3
Para el c√≥digo del empleado genere un n√∫mero aleatorio entre 100 y 900. En el
caso del nombre del empleado puede generar al azar la primera letra del
apellido, para este caso considere que la letra A se representa por el n√∫mero 65,
la B por el 66 y as√≠ sucesivamente. El dato del sueldo puede ser generado al
azar igualmente.
6. Modifique el c√≥digo de la pregunta anterior de tal manera que exista una
operaci√≥n denominada incremento() que pertenezca a la clase ListaEmpleados.
Esta operaci√≥n aumenta el salario de cada empleado en un 10%, hacer que su
programa imprima los salarios originales y los incrementados de todos los
trabajadores. Desarrolle dos soluciones en C++, una versi√≥n no deber√° usar
punteros y la otra versi√≥n deber√° usar punteros a fin de agregar los datos y un
destructor para liberar memoria.
7. Un pixel es igual a un punto con coordenadas (x,y) con la √∫nica diferencia
que un pixel contiene tambi√©n un color, por ejemplo (x,y,‚Äùrojo‚Äù). Desarrollar un
programa que permita hallar la distancia entre dos pixels usando el programa
del punto desarrollado anteriormente. Implementar su soluci√≥n en C++ y
Ruby.
8. Implementar una clase llamada Pila, la cual tenga las operaciones de
apilar(n), desapilar() y esVacia() la cual deber√° ser formada a partir de una
clase denominada ListaArreglo. La clase Lista tendr√° las operaciones de
agregarElemento(n), borrarElemento(pos) y utilizar√° como estructura de datos
del tipo list. Solamente podr√° utilizar las siguientes operaciones de listas en
Python():
pop(): elimina un elemento de una lista dada en una posici√≥n determinada
4
append(n): agrega un elemento a la lista
9. Implementar una clase llamada Cola basado en el ADT Cola, con
operaciones de encolar y decolar. Basarse en la clase lista del programa
anterior, pero primero convierta su soluci√≥n del problema 8 a C++.
10. Siguiendo el esquema dado para Herencia M√∫ltiple resuelva el siguiente
caso: En algunas facultades los alumnos con mejores promedios son nombrados
asistentes de curso, es decir que cumplen algunas funciones del profesor del
curso como pudiera ser el dictado de las pr√°cticas del curso. Se nos solicita un
programa de tal manera que se puedan imprimir los cursos que lleva un
estudiante, los cursos que dicta (o lleva) un profesor, y los cursos que dicta y
lleva un asistente de curso. Puede basarse en el siguiente esquema de clases:
5
(figura creada con: https://www.smartdraw.com/uml-diagram/uml-diagram-tool.htm)
11. En algunas ocasiones se menciona que la herencia m√∫ltiple puede ser la
consecuencia de un mal dise√±o, debido a esto se le solicita cambiar su programa
de la pregunta anterior a fin que tan s√≥lo se utilice herencia simple.
Nota: Puede utilizar herencia con una clase y asociaci√≥n con la otra.
Dise√±e su soluci√≥n en Ruby.
12. Los empleados de una compa√±√≠a X son divididos en dos categor√≠as:
empleados a tiempo parcial y empleados a tiempo completo. Los empleados a
tiempo completo reciben un monto mensual fijo el cual es afecto a un bono
igual al 20% de su sueldo por cada a√±o trabajado. Los empleados a tiempo
parcial su sueldo se calcula seg√∫n el n√∫mero de horas trabajadas al mes por el
6
costo por hora que determine la empresa. Realice un programa usando clases
abstractas que permita calcular el sueldo de un par de empleados a tiempo
parcial y a tiempo completo. Se sugiere que los datos de los empleados sean
generados de forma aleatoria.
Dise√±e su soluci√≥n en Python, C++ y Ruby.
13. Implemente un programa que imprima una planilla de sueldos parciales y
completos de un conjunto de empleados, para esto considere que puede haber
una clase llamada Departamento la cual contiene un cierto n√∫mero de
empleados de ambas categor√≠as.
Dise√±e su soluci√≥n en Ruby.
14. Siga los pasos que a continuaci√≥n se describen:
a) Cree una clase abstracta llamada PoliticaDescuento. Esta clase deber√°
tener un solo m√©todo abstracto llamado calculaDescuento, el cual retornar√° el
descuento por la compra de un n√∫mero determinado de un art√≠culo en
particular. El m√©todo tiene dos par√°metros, cantidad y costoArticulo.
b) Derive una clase llamada DescuentoBloque de PoliticaDescuento. Esta
clase deber√° tener un constructor con dos par√°metros: m√≠nimo y porcentaje. El
m√©todo calculaDescuento funcionar√° del siguiente modo, si la cantidad
adquirida de un art√≠culo es mayor a un m√≠nimo, el descuento ser√° de un
porcentaje dado por la variable respectiva.
c) Derive una clase llamada CompreNArticulosConsigaUnoGratis de
Politica Descuento. Esta clase deber√° de tener un constructor que tiene un solo
par√°metro n. Esta clase implementar√° el m√©todo calculaDescuento de tal modo
que cada n art√≠culo es gratis. Por ejemplo, la siguiente tabla da los descuentos
para la compra de varias cantidades de un art√≠culo que cuesta $10, cuando n es
3:
Cantidad 1 2 3 4 5 6 7
Descuento 0 0 10 10 10 20 20
d) Derive una clase llamada DescuentoCombinado de PoliticaDescuento.
Su constructor tendr√° dos par√°metros de tipo PoliticaDescuento. √âsta deber√°
7
implementar el m√©todo calculaDescuento para cada una de sus pol√≠ticas de
descuento. Las pol√≠ticas de descuento se encuentran en los ejercicios 5 y 6.
Adicionalmente cree un arreglo de objetos del tipo PoliticaDescuento e imprima
los descuentos respectivos de cada objeto.
Para el ejercicio planteado puede utilizar Herencia, Clases Abstractas o
Asociaci√≥n seg√∫n lo considere conveniente.
Desarrolle su soluci√≥n en Python y C++.
15. Programe en C++ una clase Padre y una clase Hija las cuales est√°n
relacionadas por Herencia. Realizar los siguientes pasos:
a) La clase Padre tendr√° un atributo a, con un constructor que permita
inicializar dicha variable.
b) La clase Hija deber√° tener dos atributos c,d los cuales son inicializados
mediante su constructor. Aparte, uno de los valores que reciba el constructor
deber√° ser enviado al constructor de la clase padre.
c) La clase Padre deber√° tener una funci√≥n que imprime el valor de su atributo
a.
d) La clase Hija deber√° tambi√©n tener una funci√≥n imprimir que imprima el
valor de sus atributos c, d.
e) Cree una funci√≥n llamada funcA la cual reciba un objeto de la clase padre y
que llame a la funci√≥n imprimir.
f) En su funci√≥n principal cree un objeto de la clase padre, un objeto d ela clase
hija y env√≠e a la funci√≥n funcA primero el objeto Padre y luego, mediante otra
llamada a esta funci√≥n, el objeto de la clase Hija. Observe que sucede con las
variables impresas.
En caso de existir object slicing modificar su funci√≥n funcA de tal manera que
reciba un puntero a un objeto de la clase padre. Observe sus resultados.
Programaci√≥n Concurrente y Paralela
16. Inicialice una lista o arreglo unidimensional con n√∫meros al azar
comprendidos entre 1 y un mill√≥n. Su programa deber√° sumar los elementos de
este arreglo haciendo uso de una funci√≥n que los sume secuencialmente, y otra
8
funci√≥n que sume estos elementos usando paralelismo. Para la parte de
paralelismo se sugiere que prueba su programa usando threads y luego los
procesadores disponibles en su computador, comparando los resultados de la
versi√≥n secuencial con las versiones paralelas.
17. Implementar el algoritmo de map reduce para conteo de palabras en un
texto, mida su tiempo de la parte del reduce de forma secuencial y luego en
forma paralela."""

    inicio = time.time() 
    print(f'Contar palabras secuencial: {contarPalabras(texto)}')
    fin = time.time() 
    print(f'Tiempo de ejecuci√≥n: {fin - inicio} segundos.\n')

    # Contar palabras usando map-reduce secuencial
    num_cores = mp.cpu_count()
    tama√±o_chunk = len(texto) // num_cores
    chunks = [texto[i:i + tama√±o_chunk] for i in range(0, len(texto), tama√±o_chunk)]

    mapped_values = list(map(map_function, chunks))
    inicio = time.time()
    print(f'Contar palabras reduce secuencial iniciado.')
    fin = time.time()
    print(f'Tiempo de reducci√≥n secuencial: {fin - inicio} segundos.\n')

    # Contar palabras usando map-reduce en paralelo
    pool = mp.Pool(processes=num_cores)
    mapped_values = pool.map(map_function, chunks)
    inicio = time.time()
    reduce_parallel(mapped_values)
    print(f'Contar palabras reduce paralela inciado.')
    fin = time.time()
    pool.close()
    pool.join()
    print(f'Tiempo de reducci√≥n paralela: {fin - inicio} segundos.\n')
if __name__ == "__main__":
    main()