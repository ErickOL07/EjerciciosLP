; 24. Calcular el resultado de la siguiente sumatoria: 1 + 2 + 3 ‚Ä¶ + ùëõ usando
; recursividad simple y tail recursi√≥n.

#lang racket

; Define una funci√≥n recursiva de cola para calcular la sumatoria
(define (s1 n c r)
  (if (= c n)
      r ; Caso base: si c es igual a n, devuelve el resultado acumulado
      (s1 n (+ c 1) (+ r c)))) ; Suma el contador al acumulador y avanza recursivamente

; Define una funci√≥n para iniciar la sumatoria
(define (suma n)
  (s1 n 0 0)) ; Llama a s1 con el contador y acumulador inicializados en 0

; Define la funci√≥n principal
(define (main)
  (begin
    (printf "Ingrese un n√∫mero:\n")
    (let* ([input (read-line)]         ; Lee la entrada como una cadena
           [n (string->number input)]) ; Convierte la cadena a n√∫mero
      (if (and (number? n) (integer? n) (>= n 0)) ; Verifica si es un n√∫mero entero positivo
          (printf "El resultado de la sumatoria es: ~a\n" (suma n)) ; Calcula e imprime la sumatoria
          (printf "Entrada inv√°lida. Por favor ingrese un n√∫mero entero positivo.\n")))))

; Llama a la funci√≥n principal
(main)