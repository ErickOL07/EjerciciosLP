; 14. Para calcular el √°rea de un tri√°ngulo se puede utilizar la f√≥rmula de Her√≥n
; que es la siguiente: ùëé = ‚àöùë†(ùë† ‚àí ùëé)(ùë† ‚àí ùëè)(ùë† ‚àí ùëê) donde ùë† es el semiper√≠metro
; del tri√°ngulo. El inconveniente es que para usar esta f√≥rmula se debe de
; cumplir la llamada desigualdad triangular. La desigualdad triangular
; especifica que la sumatoria de dos lados de un tri√°ngulo debe de ser mayor que 
; ael otro lado. Usando estos conceptos realice una funci√≥n que verifique primero
; si es que se cumple la desigualdad triangular y que luego proceda a calcular
; el √°rea de un tri√°ngulo.

#lang racket

; Define una funci√≥n para calcular el √°rea de un tri√°ngulo usando la f√≥rmula de Her√≥n
(define (heron a b c)
  (if (or (not (> (+ a b) c)) (not (> (+ a c) b)) (not (> (+ b c) a))) ; Verifica la desigualdad triangular
      -1
      (let* ([s (/ (+ a b c) 2)]) ; Calcula el semiper√≠metro s
        (sqrt (* s (- s a) (- s b) (- s c)))))) ; Aplica la f√≥rmula de Her√≥n

; Define la funci√≥n principal
(define (main)
  (begin
    (printf "Ingrese la longitud de cada lado del tri√°ngulo:\n")
    (let* ([input-a (read-line)]
           [a (string->number input-a)]
           [input-b (read-line)]
           [b (string->number input-b)]
           [input-c (read-line)]
           [c (string->number input-c)])
      (if (and (number? a) (number? b) (number? c)) ; Verifica si las entradas son n√∫meros v√°lidos
          (if (= (heron a b c) -1)
              (printf "No se cumple con la desigualdad triangular.\n")
              (printf "El √°rea del tri√°ngulo con la f√≥rmula de Her√≥n es:\n‚àö[~a * (~a - ~a) * (~a - ~a) * (~a - ~a)] = ~a\n"
                      (/ (+ a b c) 2) (/ (+ a b c) 2) a (/ (+ a b c) 2) b (/ (+ a b c) 2) c (heron a b c)))
          (printf "Entrada inv√°lida. Por favor ingrese n√∫meros v√°lidos.\n")))))

; Llama a la funci√≥n principal
(main)